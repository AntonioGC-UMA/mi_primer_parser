
My lexicum

identifier = 
[
	[a-zA-Z][a-zA-Z_1-9] 

	identifier.identifier
]

literal =
[
	int = [1-9]
	float = [1-9].[1-9]
	string = "[...]"
	function = (identifier identifier, ...) -> { code block }
	struct = struct identifier { [declaration]; ... }
	enum = enum identifier { identifier, ... }
	array = [expresion, ...]
]

code block =
[
	statement* ; // shoud I require a ; or is a \n enough?
]

expresion = 
[
	varible
	function call
	unary operator
	binary operator
	(expresion)
	asigment
	literal
]

statement =
[
	declaration
	asigment
	declaration and asigment
	constant declaration and asigment
	function call
	if statement	// I don't put else in the list becouse it is not a statement by it self, only if it comes after an if statement
	while loop
	for loop	
] 


declaration =
[
	identifier : identifier
]

asigment =
[
	identifier = expresion
	identifier [binary operator] expresion
]

declaration and asigment =
[
	identifier : identifier = expresion
	identifier := expresion
]

constant declaration and asigment =
[
	identifier :: expresion
]

function call =
[
	identifier(expresion, ...) // one or more comma separated expresions
]

if statement =
[
	if expresion { code block }
	if statement  else  if statement
	else { code block }
]

while loop =
[
	while expresion { code block }
]

for loop =		// TODO i want for loops to be for_each loops, should I define something called range like a literal (expresion -> expresion)
[
	for 
]

unary operator =
[
	[- !] expresion
]

binary operator =
[	
	expresion [+ - * / == < > += -= *= /= <= >= !=] expresion
]



/////////////////////////////////////////////////////////////////////////////////

required tokens =
[
	identifier
	.
]